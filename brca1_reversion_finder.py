"""
OBJECTIVE
Simulate, detect, and annotate reversions from deletion events that occur in BRCA1 exon 11

TOOLS USED
python3
regex
NCBI nucleotide sequences
"""

#Packages
import random as rd
import regex as re

#Functions

def simulate_deletion(seq, ref_seq):
    mutation_pos1 = rd.randint(0,len(seq)-1)
    mutation_pos2 = rd.randint(mutation_pos1+1, min(mutation_pos1+25, len(seq)))
    mutation_len = mutation_pos2 - mutation_pos1
    mutation = "-" * mutation_len
    mutation_nuc = ref_seq[mutation_pos1:mutation_pos2]
    #Annotation
    #If only 1 bp deletion
    if mutation_len == 1:
        mutation_annotation = "".join(('c.',str(903+mutation_pos1),'del',mutation_nuc))
    elif mutation_len > 1:
        mutation_annotation = "".join(('c.',str(903+mutation_pos1+1),'_',str(903+mutation_pos2),'del',mutation_nuc))
    mut_seq = "".join((seq[:mutation_pos1],mutation,seq[mutation_pos2:]))
    return(mutation_annotation, mutation_len, mut_seq)
    
def simulate_mutations(seq):
    primary_mutation_annotation, primary_mutation_length, mut_seq = simulate_deletion(seq, seq)
    secondary_mutation_annotation, secondary_mutation_length, mut_seq = simulate_deletion(mut_seq, seq)
    return(primary_mutation_annotation, primary_mutation_length, secondary_mutation_annotation, secondary_mutation_length, mut_seq)

def detect_reversions(mut_seq, ref_seq):
    dels = [(*m.span(), len(m.group(0))) for m in re.finditer("-+", mut_seq)]
    if len(dels) == 1: #If there is one overlapping deletion
        if (dels[0][2]%3) == 0:
            reversion_status = "Y"
        else:
            reversion_status = "N"
        trunc_ref_seq = ref_seq[dels[0][0]:dels[0][1]]
        trunc_mut_seq = '' #In the case of one deletion, no mutated sequence since it is deleted
        return(reversion_status, trunc_ref_seq, trunc_mut_seq)
    else: #If there are seperate primary and secondary deletions
        if ((dels[0][2]+dels[1][2])%3) == 0:
            reversion_status = "Y"
        else:
            reversion_status = "N"
        trunc_ref_seq = ref_seq[dels[0][0]:dels[1][1]]
        trunc_mut_seq = ref_seq[dels[0][1]:dels[1][0]] #Keep only sequence between deleted segments
        return(reversion_status, trunc_ref_seq, trunc_mut_seq)
    
# NCB1 BRCA1 Exon 11 (NM_007294)
brca1_x11 = 'CTGCTTGTGAATTTTCTGAGACGGATGTAACAAATACTGAACATCATCAACCCAGTAATAATGATTTGAACACCACTGAGAAGCGTGCAGCTGAGAGGCATCCAGAAAAGTATCAGGGTAGTTCTGTTTCAAACTTGCATGTGGAGCCATGTGGCACAAATACTCATGCCAGCTCATTACAGCATGAGAACAGCAGTTTATTACTCACTAAAGACAGAATGAATGTAGAAAAGGCTGAATTCTGTAATAAAAGCAAACAGCCTGGCTTAGCAAGGAGCCAACATAACAGATGGGCTGGAAGTAAGGAAACATGTAATGATAGGCGGACTCCCAGCACAGAAAAAAAGGTAGATCTGAATGCTGATCCCCTGTGTGAGAGAAAAGAATGGAATAAGCAGAAACTGCCATGCTCAGAGAATCCTAGAGATACTGAAGATGTTCCTTGGATAACACTAAATAGCAGCATTCAGAAAGTTAATGAGTGGTTTTCCAGAAGTGATGAACTGTTAGGTTCTGATGACTCACATGATGGGGAGTCTGAATCAAATGCCAAAGTAGCTGATGTATTGGACGTTCTAAATGAGGTAGATGAATATTCTGGTTCTTCAGAGAAAATAGACTTACTGGCCAGTGATCCTCATGAGGCTTTAATATGTAAAAGTGAAAGAGTTCACTCCAAATCAGTAGAGAGTAATATTGAAGACAAAATATTTGGGAAAACCTATCGGAAGAAGGCAAGCCTCCCCAACTTAAGCCATGTAACTGAAAATCTAATTATAGGAGCATTTGTTACTGAGCCACAGATAATACAAGAGCGTCCCCTCACAAATAAATTAAAGCGTAAAAGGAGACCTACATCAGGCCTTCATCCTGAGGATTTTATCAAGAAAGCAGATTTGGCAGTTCAAAAGACTCCTGAAATGATAAATCAGGGAACTAACCAAACGGAGCAGAATGGTCAAGTGATGAATATTACTAATAGTGGTCATGAGAATAAAACAAAAGGTGATTCTATTCAGAATGAGAAAAATCCTAACCCAATAGAATCACTCGAAAAAGAATCTGCTTTCAAAACGAAAGCTGAACCTATAAGCAGCAGTATAAGCAATATGGAACTCGAATTAAATATCCACAATTCAAAAGCACCTAAAAAGAATAGGCTGAGGAGGAAGTCTTCTACCAGGCATATTCATGCGCTTGAACTAGTAGTCAGTAGAAATCTAAGCCCACCTAATTGTACTGAATTGCAAATTGATAGTTGTTCTAGCAGTGAAGAGATAAAGAAAAAAAAGTACAACCAAATGCCAGTCAGGCACAGCAGAAACCTACAACTCATGGAAGGTAAAGAACCTGCAACTGGAGCCAAGAAGAGTAACAAGCCAAATGAACAGACAAGTAAAAGACATGACAGCGATACTTTCCCAGAGCTGAAGTTAACAAATGCACCTGGTTCTTTTACTAAGTGTTCAAATACCAGTGAACTTAAAGAATTTGTCAATCCTAGCCTTCCAAGAGAAGAAAAAGAAGAGAAACTAGAAACAGTTAAAGTGTCTAATAATGCTGAAGACCCCAAAGATCTCATGTTAAGTGGAGAAAGGGTTTTGCAAACTGAAAGATCTGTAGAGAGTAGCAGTATTTCATTGGTACCTGGTACTGATTATGGCACTCAGGAAAGTATCTCGTTACTGGAAGTTAGCACTCTAGGGAAGGCAAAAACAGAACCAAATAAATGTGTGAGTCAGTGTGCAGCATTTGAAAACCCCAAGGGACTAATTCATGGTTGTTCCAAAGATAATAGAAATGACACAGAAGGCTTTAAGTATCCATTGGGACATGAAGTTAACCACAGTCGGGAAACAAGCATAGAAATGGAAGAAAGTGAACTTGATGCTCAGTATTTGCAGAATACATTCAAGGTTTCAAAGCGCCAGTCATTTGCTCCGTTTTCAAATCCAGGAAATGCAGAAGAGGAATGTGCAACATTCTCTGCCCACTCTGGGTCCTTAAAGAAACAAAGTCCAAAAGTCACTTTTGAATGTGAACAAAAGGAAGAAAATCAAGGAAAGAATGAGTCTAATATCAAGCCTGTACAGACAGTTAATATCACTGCAGGCTTTCCTGTGGTTGGTCAGAAAGATAAGCCAGTTGATAATGCCAAATGTAGTATCAAAGGAGGCTCTAGGTTTTGTCTATCATCTCAGTTCAGAGGCAACGAAACTGGACTCATTACTCCAAATAAACATGGACTTTTACAAAACCCATATCGTATACCACCACTTTTTCCCATCAAGTCATTTGTTAAAACTAAATGTAAGAAAAATCTGCTAGAGGAAAACTTTGAGGAACATTCAATGTCACCTGAAAGAGAAATGGGAAATGAGAACATTCCAAGTACAGTGAGCACAATTAGCCGTAATAACATTAGAGAAAATGTTTTTAAAGAAGCCAGCTCAAGCAATATTAATGAAGTAGGTTCCAGTACTAATGAAGTGGGCTCCAGTATTAATGAAATAGGTTCCAGTGATGAAAACATTCAAGCAGAACTAGGTAGAAACAGAGGGCCAAAATTGAATGCTATGCTTAGATTAGGGGTTTTGCAACCTGAGGTCTATAAACAAAGTCTTCCTGGAAGTAATTGTAAGCATCCTGAAATAAAAAAGCAAGAATATGAAGAAGTAGTTCAGACTGTTAATACAGATTTCTCTCCATATCTGATTTCAGATAACTTAGAACAGCCTATGGGAAGTAGTCATGCATCTCAGGTTTGTTCTGAGACACCTGATGACCTGTTAGATGATGGTGAAATAAAGGAAGATACTAGTTTTGCTGAAAATGACATTAAGGAAAGTTCTGCTGTTTTTAGCAAAAGCGTCCAGAAAGGAGAGCTTAGCAGGAGTCCTAGCCCTTTCACCCATACACATTTGGCTCAGGGTTACCGAAGAGGGGCCAAGAAATTAGAGTCCTCAGAAGAGAACTTATCTAGTGAGGATGAAGAGCTTCCCTGCTTCCAACACTTGTTATTTGGTAAAGTAAACAATATACCTTCTCAGTCTACTAGGCATAGCACCGTTGCTACCGAGTGTCTGTCTAAGAACACAGAGGAGAATTTATTATCATTGAAGAATAGCTTAAATGACTGCAGTAACCAGGTAATATTGGCAAAGGCATCTCAGGAACATCACCTTAGTGAGGAAACAAAATGTTCTGCTAGCTTGTTTTCTTCACAGTGCAGTGAATTGGAAGACTTGACTGCAAATACAAACACCCAGGATCCTTTCTTGATTGGTTCTTCCAAACAAATGAGGCATCAGTCTGAAAGCCAGGGAGTTGGTCTGAGTGACAAGGAATTGGTTTCAGATGATGAAGAAAGAGAACGGGCTTGGAAGAAAATAATCAAGAAGAGCAAAGCATGGATTCAAACTTAG'

simulation_results = []
for i in range(10): #Adjust to the number of simulations
    primary_mutation_annotation, primary_mutation_len, secondary_mutation_annotation, secondary_mutation_len, mut_seq = simulate_mutations(brca1_x11)
    reversion_status, trunc_ref_seq, trunc_mut_seq = detect_reversions(mut_seq, brca1_x11)
    simulation_results.append([trunc_ref_seq, mut_seq, trunc_mut_seq, primary_mutation_annotation, str(primary_mutation_len), secondary_mutation_annotation, str(secondary_mutation_len), reversion_status])

#Write Report
report = open("reversion_report.txt", "a")
report.write("OBJECTIVE: Simulate deletions in BRCA1 exon 11 (NM_007294) and determine presence of reversions\n")
report.write("FullReferenceSequence\tImpactedReferenceSequence\tFullMutatatedSequence\tImpactedMutatedSequence\tPrimaryMutation\tPrimaryMutationLength\tSecondaryMutation\tSecondaryMutationLength\tReversionDetected\n")
for i in range(len(simulation_results)):
    sim_report = '\t'.join(simulation_results[i])
    report.write(brca1_x11+"\t"+sim_report+"\n")
report.close()